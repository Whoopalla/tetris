name: C Raylib Build and Release

on:
  push:
    branches:
      - master
    tags:
      - 'v*' # Trigger on tags like v1.0.0
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install mingw
        shell: bash

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc make libgl1-mesa-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev
        shell: bash

      - name: Install Emscripten (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          # Append Emscripten paths to GITHUB_ENV
          echo "/home/runner/work/${{ github.repository }}/emsdk" >> $GITHUB_ENV
          echo "/home/runner/work/${{ github.repository }}/emsdk/upstream/emscripten" >> $GITHUB_ENV
          echo "/home/runner/work/${{ github.repository }}/emsdk/node/20.18.0_64bit/bin" >> $GITHUB_ENV
        shell: bash

      - name: Compile build.c (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          gcc -o nob.exe nob.c
        shell: bash
        working-directory: ./

      - name: Compile build.c (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          gcc -o nob nob.c
        shell: bash
        working-directory: ./

      - name: Run build executable (Native)
        run: |
          chmod +x nob || true
          ./nob${{ matrix.os == 'windows-latest' && '.exe' || '' }} -release
        shell: bash
        working-directory: ./

      - name: Run build executable (WebAssembly, Ubuntu only)
        if: matrix.os == 'ubuntu-latest'
        run: |
          chmod +x nob
          ./nob -web
        shell: bash
        working-directory: ./ 

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: project-build-${{ matrix.os }}
          path: |
            build
            *.o
            *.a
            *.exe
            mygame*
            *.html
            *.wasm
            *.js

  release:
    needs: build # Depends on the build job
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # Only run on tag pushes
    permissions:
      contents: write # Required for creating releases

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for release notes

      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: project-build-windows-latest
          path: windows-artifacts

      - name: Download Ubuntu artifacts
        uses: actions/download-artifact@v4
        with:
          name: project-build-ubuntu-latest
          path: ubuntu-artifacts

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: true # Auto-generate release notes
          draft: false # Publish immediately
          prerelease: false # Mark as full release
          artifacts: |
            windows-artifacts/mygame.exe
            ubuntu-artifacts/mygame
          name: Release ${{ github.ref_name }} # e.g., Release v1.0.0
